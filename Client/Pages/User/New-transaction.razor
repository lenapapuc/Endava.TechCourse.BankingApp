@page "/transactions/new-transaction"
@layout UserLayout
@inject HttpClient httpClient
@using System.Net.Http.Json
@using Endava.TechCourse.BankApp.Shared
<MudItem md="12">
    <MudText Typo="Typo.h4" GutterBottom="true">Creeaza o nouă tranzacție</MudText>
</MudItem>

<MudItem md="4">
    <MudGrid>

        <MudItem md="12">
            <MudPaper Elevation="3" Class="pa-2">
                <MudSelect T="string" @bind-Value="newTransaction.SourceWallet" Label="Portofelul Sursa" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var wallet in wallets)
                    {
                        if (wallet != null)
                        {
                            <MudSelectItem T="string" Value="wallet.Id" />
                        }
                    }
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem md="12">
            <MudPaper Elevation="3" Class="pa-2">
                <MudSelect T="string" @bind-Value="newTransaction.DestinationWallet" Label="Portofelul Destinatie" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var wallet in wallets)
                    {
                        if (wallet != null)
                        {
                            <MudSelectItem T="string" Value="wallet.Id" />
                        }
                    }
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem md="12">
            <MudPaper Elevation="3" Class="pa-2">
                <MudTextField @bind-Value="newTransaction.Amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" AdornmentColor="Color.Warning" />
            </MudPaper>
        </MudItem>
        
        <MudItem md="12">
            <MudPaper Elevation="3" Class="pa-2">
                <MudTextField T="string" @bind-Value="newTransaction.Description" Counter="25" MaxLength="25" HelperText="Description" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Description" Variant="Variant.Text" />
            </MudPaper>
        </MudItem>
        <MudItem md="12">
            <MudPaper Elevation="3" Class="pa-2">
                <MudTextField T="string" @bind-Value="newTransaction.Type" Counter="25" MaxLength="25" HelperText="Type" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Type" Variant="Variant.Text" />
            </MudPaper>
        </MudItem>
        <MudItem md="3">
            <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddTransaction">Adauga</MudButton>
        </MudItem>
        <MudItem md="12">
          
        </MudItem>
    </MudGrid>
</MudItem>

@code {

    private IEnumerable<CurrencyDto> currencies;
    private IEnumerable<WalletDto> wallets = new List<WalletDto>();

    private TransactionDto newTransaction = new();
    private string newTransactionError = string.Empty;
    private string deleteTransactionError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetWalletsPerUser();
        await GetCurrencies();
        StateHasChanged();

        await base.OnInitializedAsync();
    }

   // public async Task GetTransactions() => transactions = await this.httpClient.GetFromJsonAsync<List<TransactionDto>>("api/transactions");
    public async Task GetCurrencies() => currencies = await this.httpClient.GetFromJsonAsync<List<CurrencyDto>>("api/currencies");
    public async Task GetWalletsPerUser() => wallets = await this.httpClient.GetFromJsonAsync<List<WalletDto>>("api/wallets");


 


    public async Task AddTransaction()
    {
        if (string.IsNullOrEmpty(newTransaction.SourceWallet))
            newTransactionError = "Portofelul Sursa nu poate fi gol";
        else if (string.IsNullOrEmpty(newTransaction.DestinationWallet))
            newTransactionError = "Portofelul Destinatie nu poate fi gol";
        else if (newTransaction.Amount <= 0)
            newTransactionError = "Suma nu poate fi mai mica ca 0";
        else
        {
            var result = await this.httpClient.PostAsJsonAsync("api/transactions", newTransaction);

            if (!result.IsSuccessStatusCode)
                newTransactionError = await result.Content.ReadAsStringAsync();
            else
            {
               // await GetTransactions();
                newTransactionError = string.Empty;
                newTransaction = new();
            }
        }

        StateHasChanged();
    }
    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "Max 25 characters";
    }
  

}